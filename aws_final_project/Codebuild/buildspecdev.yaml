version: 0.2
phases:
  install:
    runtime-versions:
      python: 3.8
      nodejs: 12
      dotnet: 3.1
    commands:
      - echo Installing cdk
      - n 16
      - npm install -g aws-cdk

      - echo Preparing environment variables
      - TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - echo $TAG
      - cat .env
      - sed -i '/TAG/c\TAG='"${TAG}"'' .env
      - cat .env
  pre_build:
    commands:
      - echo Starting prebuild phase

      - echo Installing depedencies
      - python3 -m pip install -r requirements.txt
      
      - echo Preparing networking stack...
      - cdk diff networking-stack-mm
      - cdk synth networking-stack-mm

      - echo Preparing api-dynamo-lambda stack...
      - cdk diff lambda-api-dynamo-stack-mm
      - cdk synth lambda-api-dynamo-stack-mm

      - echo Pulling APIGW id
      - APIID=$(aws cloudformation --region eu-west-1 describe-stacks --stack-name lambda-api-dynamo-stack-mm --query 'Stacks[0].Outputs[?OutputKey==`apiid`].OutputValue' --output text)
      - cat ./aws_final_project/EcsCluster/swagger.json | jq '(.paths."/masterclass"[].parameters[] | select(.default)).default |= "'$APIID'"' ./aws_final_project/EcsCluster/swagger.json > parsing.txt && cp parsing.txt ./aws_final_project/EcsCluster/swagger.json

  build:
    commands:
      - echo Entering build phase
      - aws --version

      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 446835144354.dkr.ecr.eu-west-1.amazonaws.com
      
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t markomandic/openapiui ./aws_final_project/EcsCluster/

      - echo Tagging image
      - docker tag markomandic/openapiui 446835144354.dkr.ecr.eu-west-1.amazonaws.com/markomandicecrrepo:$TAG
      
      - echo Pushing the Docker images...
      - docker push 446835144354.dkr.ecr.eu-west-1.amazonaws.com/markomandicecrrepo:$TAG
      - echo Push completed on `date`



  post_build:
    commands:
      - echo Entering postbuild phase

      - echo ECS deploy
      - echo Preparing ecs-cluster stack...
      - cdk diff ecs-cluster-stack-mm
      - cdk synth ecs-cluster-stack-mm
     # - cdk deploy --require-approval never --verbose ecs-cluster-stack-mm